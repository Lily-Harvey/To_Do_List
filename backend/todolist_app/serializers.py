from rest_framework import serializers
from django.contrib.auth.models import User
from .models import Task


class RegisterSerializer(serializers.ModelSerializer):
    """
    Serializer for registering a new user.
    Handles the creation of a user account, including password validation.
    """
    password = serializers.CharField(write_only=True)
    # This field stores the user's password
    # but does not include it in the API response.

    password_confirm = serializers.CharField(write_only=True)
    # This field is used to confirm that
    # the user has correctly entered their password.

    class Meta:
        model = User
        fields = ('username', 'email', 'password', 'password_confirm')
        # Specifies the fields from the User model
        # that will be used in this serializer.
        # 'username', 'email', 'password', and 'password_confirm'
        # are required for registration.

    def validate(self, data):
        """
        Custom validation to ensure that the password
        and password confirmation match.
        If they don't, a validation error is raised.
        """
        if data['password'] != data['password_confirm']:
            # If the passwords do not match, raise a ValidationError
            # with an appropriate message.
            raise serializers.ValidationError({"password_confirm":
                                              "Passwords must match."})
        # Return the validated data if passwords match.
        return data

    def create(self, validated_data):
        """
        Create and return a new user instance.
        Uses Django's built-in create_user method to handle password hashing
        and user creation.
        """
        user = User.objects.create_user(
            username=validated_data['username'],
            email=validated_data['email'],
            password=validated_data['password']
            # Only the validated username, email,
            # and password are used to create the user.
        )
        return user
        # The created user instance is returned,
        # now ready to be used in the application.


class TaskSerializer(serializers.ModelSerializer):
    """
    Serializer for the Task model.
    Handles serialization and deserialization of Task instances,
    enabling conversion between model instances and JSON.
    """
    class Meta:
        model = Task
        fields = ['id', 'user', 'title', 'description',
                  'completed', 'created_at']
        # The fields list determines which model attributes
        # are included in the serialization process.

        # 'id': Unique identifier for each task.
        # 'user': The user who owns the task.
        # 'title': The title of the task.
        # 'description': Detailed information about the task.
        # 'completed': Boolean indicating if the task is completed.
        # 'created_at': Timestamp indicating when the task was created.

        read_only_fields = ['id', 'created_at', 'user']
        # These fields are marked as read-only to ensure
        # they cannot be modified by the client.
        # 'id' and 'created_at' are automatically generated by the database.
        # 'user' is set by the server (e.g., in the view)
        # and should not be provided by the client.
